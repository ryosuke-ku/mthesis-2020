@inproceedings{b1,
author={S. {Shamshiri} and J. M. {Rojas} and J. P. {Galeotti} and N. {Walkinshaw} and G. {Fraser}},
booktitle={2018 IEEE 11th International Conference on Software Testing, Verification and Validation (ICST)},
title={How Do Automatically Generated Unit Tests Influence Software Maintenance?},
year={2018},
volume={},
number={},
pages={250-261},
keywords={program testing;software maintenance;automated test generation;automatically generated unit tests;software maintenance;Task analysis;Maintenance engineering;Software maintenance;Test pattern generators;Java;Biological cells;Software maintenance;Automated test generation;Empirical software engineering;Software testing;Test maintenance},
doi={10.1109/ICST.2018.00033},
ISSN={null},
}

@inproceedings{b2,
author={C. K. {Roy} and J. R. {Cordy}},
booktitle={Proceedings of the International Conference on Program Comprehension},
title={NICAD: Accurate Detection of Near-Miss Intentional Clones Using Flexible Pretty-Printing and Code Normalization},
year={2008},
volume={},
number={},
pages={172-181},
keywords={grammars;program compilers;specification languages;text analysis;NICAD;near-miss intentional clones;pretty-printing;code normalization;language-specific parser;lightweight clone detection approach;source transformation system;near-miss clones;text line comparison technique;agile parsing;island grammars;Cloning;Filtering;Software systems;Printing;Programming profession;Clone Detection;Near-Miss Intentional Clones;Flexible Pretty-Printing;Flexible Code Normalization;Flexible Code Filtering},
doi={10.1109/ICPC.2008.41},
ISSN={1092-8138},
}

@inproceedings{EvoSuite,
author = {G. {Fraser} and A. {Arcuri}},
title = {EvoSuite: Automatic Test Suite Generation for Object-oriented Software},
booktitle = {Proceedings of the Symposium on the Foundations of Software Engineering (FSE)},
pages = {416--419}, 
year = {2011},
} 


@inproceedings{b5,
author={M. {Greiler} and A. {Zaidman} and A. {van Deursen} and M. {Storey}},
booktitle={Proceedings of the International Working Conference on Mining Software Repositories (MSR)},
title={Strategies for avoiding text fixture smells during software evolution},
year={2013},
volume={},
number={},
pages={387-396},
keywords={configuration management;program testing;public domain software;software maintenance;text fixture smell avoidance;software evolution;automated tests;setup code;automated testing;test code quality;fixture-related test smells;open source systems;setup management strategies;code refactoring;Market research;Fixtures;Java;Dispersion;Testing;Software systems;test fixture smells;test evolution;maintenance},
doi={10.1109/MSR.2013.6624053},
ISSN={2160-1852},
} 

@book{b6,
  author = {G. {Meszaros}},
  publisher = {Addison-Wesley},
  title = {xUnit Test Patterns: Refactoring Test Code},
  year = {2007},
}


@INPROCEEDINGS{b8,
author={D. {Spadini} and F. {Palomba} and A. {Zaidman} and M. {Bruntink} and A. {Bacchelli}},
booktitle={Proceedings of the International Conference on Software Maintenance and Evolution (ICSME)},
title={On the Relation of Test Smells to Software Code Quality},
year={2018},
volume={},
number={},
pages={1-12},
keywords={program debugging;program testing;software maintenance;software metrics;software quality;software code quality;test code;software quality;tested production code;Eager Test;test smells relation;change-and defect-proneness;Assertion Roulette;Production;Software quality;Testing;Software systems;Measurement;Tools;test smells;code quality;automated testing},
doi={10.1109/ICSME.2018.00010},
ISSN={1063-6773},
month={Sep.},
}


@inproceedings{b13,
author={S. {Panichella} and A. {Panichella} and M. {Beller} and A. {Zaidman} and H. C. {Gall}},
booktitle={Proceedings of the International Conference on Software Engineering (ICSE)},
title={The Impact of Test Case Summaries on Bug Fixing Performance: An Empirical Investigation},
year={2016},
volume={},
number={},
pages = {547--558},
keywords={program debugging;program testing;test case summaries;bug fixing performance;automated test generation tools;TestDescriber approach;automated unit test generation;search-based techniques;Testing;Computer bugs;Java;Software;Software engineering;Natural languages;Pragmatics;Software testing;Test Case Summarization;Empirical Study},
doi={10.1145/2884781.2884847},
ISSN={1558-1225},
} 


@inproceedings{b14,
 author = {E. {Daka} and J. {Campos} and G. {Fraser} and J. {Dorn} and w. {Weimer}},
 title = {Modeling Readability to Improve Unit Tests},
 booktitle = {Proceedings of the Joint Meeting on Foundations of Software Engineering (ESEC/FSE)},
 pages = {107--118},
 year = {2015}
} 


@inproceedings{b15,
 author = {F. {Palomba} and A. {Panichella} and A. {Zaidman} and R. {Oliveto} and A. D. {Lucia}},
 title = {Automatic Test Case Generation: What if Test Code Quality Matters?},
 booktitle = {Proceedings of the International Symposium on Software Testing and Analysis (ISSTA)},
 pages = {130--141},
 year = {2016},
} 

@INPROCEEDINGS{b17,
author={A. {Panichella} and F. M. {Kifetew} and P. {Tonella}},
booktitle={Proceedings of the International Conference on Software Testing, Verification and Validation (ICST)},
title={Reformulating Branch Coverage as a Many-Objective Optimization Problem},
pages={1-10},
year={2015},
}


@INPROCEEDINGS{T3,
author={I. S. W. B. {Prasetya}},
booktitle={Proceedings of the International Workshop on Search-Based Software Testing (SBST)},
title={T3: Benchmarking at Third Unit Testing Tool Contest},
year={2015},
volume={},
number={},
pages={44-47},
keywords={benchmark testing;Java;program testing;benchmarking;third unit testing tool contest;light weight automated unit testing tool;Java;3rd Java unit testing tool contest;search-based software testing;SBST;Benchmark testing;Java;Conferences;Generators;Software testing;Internet;automated testing;automated testing java;benchmark testing tools;unit testing;random testing},
doi={10.1109/SBST.2015.18},
ISSN={null},
}




@article{b19,
  title={Instance Generator and Problem Representation to Improve Object Oriented Code Coverage},
  author={S. {Abdelilah} and P. {Gilles} and Y. {Gu{\'e}h{\'e}neuc}},
  journal={IEEE Transactions on Software Engineering (TSE)},
  pages={294--313},
  year={2015},
  volume={41},
}

@Article{b20,
author={M. {Ellims} and J. {Bridges} and D. C. {Ince}},
title={The Economics of Unit Testing},
journal={Empirical Software Engineering},
year={2006},
volume={11},
number={1},
pages={5--31},
}


@book{b22,
 author = {F. {Appel}},
 title = {Testing with Junit},
 year = {2015},
 isbn = {1782166602, 9781782166603},
 publisher = {Packt Publishing},
} 


@INPROCEEDINGS{Zhang2017,
author={T. {Zhang} and M. {Kim}},
booktitle={Proceedings of the International Conference on Software Engineering (ICSE)},
title={Automated Transplantation and Differential Testing for Clones},
year={2017},
volume={},
number={},
pages={665--676},
keywords={program diagnostics;program testing;public domain software;software reusability;automated transplantation testing;automated differential testing;code clones;runtime behavior;Grafter;variation identification;identifier names;targets;compilation errors;code transformation;stub code insertion;input data transfer;intermediate output value transfer;test outcome level;intermediate program state level;open source projects;test reuse;clone pairs;mutation testing tool;Major;fault injection;behavioral differences detection;test-level comparison;state-level comparison;static cloning bug finders;Cloning;Computer bugs;Testing;Runtime;Software;Safety;Java;Test Reuse;Code Transplantation;Differential Testing;Code Clones},
doi={10.1109/ICSE.2017.67},
ISSN={1558-1225},
}


@inproceedings{Jiang2007,
 author = {L. {Jiang} and G. {Misherghi} and Z. {Su} and S. {Glondu}},
 title = {{DECKARD}: Scalable and Accurate Tree-Based Detection of Code Clones},
 booktitle = {Proceedings of the International Conference on Software Engineering (ICSE)},
 pages = {96--105},
 year = {2007},
} 

@Article{soha:2013,
 author = {S. {Makady} and R. J. {Walker}},
 title = {Validating pragmatic reuse tasks by leveraging existing test suites},
 journal = {Software Practice and Experience},
 pages = {1039--1070},
 year = {2013},
} 

@inproceedings{Fabio2016,
 author = {F. {Palomba} and D. D. {Nucci} and A. {Panichella} and R. {Oliveto} and A. D. {Lucia}},
 title = {On the Diffusion of Test Smells in Automatically Generated Test Code: An Empirical Study},
 booktitle = {Proceedings of the International Workshop on Search-Based Software Testing (SBST)},
 pages = {5--14},
 year = {2016}
} 

@Article{c1,
  author = {肥後芳樹 and 楠本真二 and 井上 克郎},
  title = {コードクローン検出とその関連技術},
  journal = {電子情報通信学会論文誌},
  year={2008},
  volume={J91--D},
  number={6},
  pages={1465--1481},
  isjapanese = {true}
} 

@ARTICLE{c2,
author={B. S. {Baker}},
journal={IEEE Transactions on Software Engineering (TSE)},
title={Finding Clones with Dup: Analysis of an Experiment},
year={2007},
volume={33},
number={9},
pages={608-621},
keywords={software reusability;software tools;Dup;source code;code sections;systematic substitution;postprocessor;Cloning;Java;Computer bugs;Plagiarism;Data structures;Design methodology;Software tools;Tree graphs;Particle measurements;Redundant code;duplicated code;softwareclones},
doi={10.1109/TSE.2007.70720},
ISSN={2326-3881},
}

@INPROCEEDINGS{c3,
author={I. D. {Baxter} and A. {Yahin} and L. {Moura} and M. {Sant'Anna} and L. {Bier}},
booktitle={Proceedings of the International Conference on Software Maintenance (ICSM)},
title={Clone detection using abstract syntax trees},
year={1998},
volume={},
number={},
pages={368-377},
doi={10.1109/ICSM.1998.738528},
ISSN={1063-6773},
}

@article{c4,
author = {C. {Roy} and J, {Cordy} and R. {Koschke}},
year = {2009},
pages = {470-495},
title = {Comparison and evaluation of code clone detection techniques and tools: A qualitative approach},
volume = {74},
journal = {Science of Computer Programming},
doi = {10.1016/j.scico.2009.02.007}
}

@INPROCEEDINGS{c5,
author={H. {Kim} and Y. {Jung} and S. {Kim} and K. {Yi}},
booktitle={Proceedings of the International Conference on Software Engineering (ICSE)},
title={MeCC: memory comparison-based clone detector},
year={2011},
volume={},
number={},
pages={301-310},
keywords={software maintenance;MeCC;memory comparison-based clone detector;semantic clone detection technique;program abstract memory state;semantic-based static analyzer;large-scale open source projects;clone change identification;refactoring candidate finding;software evolution understanding;Cloning;Semantics;Syntactics;Detectors;Educational institutions;Reactive power;Software;abstract interpretation;clone detection;software maintenance;static analysis},
doi={10.1145/1985793.1985835},
ISSN={0270-5257},
}

@article{c6,
author = {D. {Rattan} and R. {Bhatia} and M. {Singh}},
year = {2013},
pages = {1165–1199},
title = {Software clone detection: A systematic review},
volume = {55},
journal = {Information and Software Technology},
doi = {10.1016/j.infsof.2013.01.008}
}

@book{h1,
author = {Beck},
title = {Test Driven Development: By Example},
year = {2002},
isbn = {0321146530},
publisher = {Addison-Wesley Longman Publishing Co., Inc.},
}

@techreport{t1,
author = {A. {Deursen} and L. M. F. {Moonen} and A. {Bergh} and G. {Kok}},
title = {Refactoring Test Code},
year = {2001},
publisher = {CWI (Centre for Mathematics and Computer Science)},
}


@article{Bavota,
author = {G. {Bavota} and A. {Qusef} and R. {Oliveto} and A. {Lucia} and D. {Binkley}},
title = {Are Test Smells Really Harmful? An Empirical Study},
year = {2015},
issue_date = {2015},
publisher = {Kluwer Academic Publishers},
address = {USA},
volume = {20},
number = {4},
issn = {1382-3256},
url = {https://doi.org/10.1007/s10664-014-9313-0},
doi = {10.1007/s10664-014-9313-0},
journal = {Empirical Software Engineering},
pages = {1052–1094},
numpages = {43},
keywords = {Mining software repositories, Unit testing, Controlled experiments, Test smells}
}



@inproceedings{Tufano,
author = {M. {Tufano} and F. {Palomba} and G. {Bavota} and M. D. {Penta} and R. {Oliveto} and A. D. {Lucia} and D. {Poshyvanyk}},
title = {An Empirical Investigation into the Nature of Test Smells},
year = {2016},
isbn = {9781450338455},
url = {https://doi.org/10.1145/2970276.2970340},
doi = {10.1145/2970276.2970340},
booktitle = {Proceedings of the International Conference on Automated Software Engineering (ASE)},
pages = {4–15},
numpages = {12},
keywords = {Test Smells, Software Evolution, Mining Software Repositories},
location = {Singapore, Singapore},
}

@INPROCEEDINGS{Davide,
author={D. {Spadini} and F. {Palomba} and A. {Zaidman} and M. {Bruntink} and A. {Bacchelli}},
booktitle={Proceedings of the International Conference on Software Maintenance and Evolution (ICSME)},
title={On the Relation of Test Smells to Software Code Quality},
year={2018},
volume={},
number={},
pages={1-12},
keywords={program debugging;program testing;software maintenance;software metrics;software quality;software code quality;test code;software quality;tested production code;Eager Test;test smells relation;change-and defect-proneness;Assertion Roulette;Production;Software quality;Testing;Software systems;Measurement;Tools;test smells;code quality;automated testing},
doi={10.1109/ICSME.2018.00010},
ISSN={1063-6773},
}

@Inbook{Machado2010,
author= {P. {Machado} and A. {Sampaio}}, 
title={Automatic Test-Case Generation},
booktitle = {Testing Techniques in Software Engineering},
year={2010},
publisher={Springer Berlin Heidelberg},
pages={59--103},
}

@INPROCEEDINGS{FaCoY,
author={K. {Kim} and D. {Kim} and T. F. {Bissyandé} and E. {Choi} and L. {Li} and J. {Klein} and Y. {Le Traon}},
booktitle={Proceedings of the International Conference on Software Engineering (ICSE)},
title={FaCoY - A Code-to-Code Search Engine},
year={2018},
volume={},
number={},
pages={946-957},
keywords={query processing;search engines;software engineering;software maintenance;code-to-code search engine;code search tasks;code-to-code approach;code-patch recommendation;FaCoY;semantic code clones;directly matching code query tokens;user input code;statically finding code fragments;code diversity;code transplantation;Cloning;Search engines;Semantics;Software;Natural languages;Syntactics;Runtime;code search;semantic clones;code to code search},
doi={10.1145/3180155.3180187},
ISSN={1558-1225},
}

@inproceedings{Peruma,
author = {A. {Peruma} and K. {Almalki} and C. D. {Newman} and M. W. {Mkaouer} and A. {Ouni} and F. {Palomba}},
title = {On the Distribution of Test Smells in Open Source Android Applications: An Exploratory Study},
year = {2019},
booktitle = {Proceedings of the International Conference on Computer Science and Software Engineering (CASCON)},
pages = {193--202},
numpages = {10},
keywords = {software quality, software maintenance, unit test, test smells},
location = {Toronto, Ontario, Canada},
}

@INPROCEEDINGS{GRT,
author={L. {Ma} and C. {Artho} and C. {Zhang} and H. {Sato} and J. {Gmeiner} and R. {Ramler}},
booktitle={Proceedings of the International Conference on Automated Software Engineering (ASE)},
title={GRT: Program-Analysis-Guided Random Testing (T)},
year={2015},
volume={},
number={},
pages={212-223},
keywords={object-oriented programming;program testing;GRT;program analysis guided random testing;program types;automated test generation;static analysis;continuous coverage analysis;fault detection capability;peer techniques;Testing;Software;Tin;Data mining;Computer bugs;Impurities;Frequency measurement;Automatic test generation;random testing;static analysis;dynamic analysis},
doi={10.1109/ASE.2015.49},
ISSN={null},
month={Nov},}


@article{gilligan34,
author = {R. {Holmes} and R. J. {Walker}},
title = {Systematizing Pragmatic Software Reuse},
year = {2013},
issue_date = {November 2012},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {21},
number = {4},
issn = {1049-331X},
url = {https://doi.org/10.1145/2377656.2377657},
doi = {10.1145/2377656.2377657},
journal = {ACM Transactions on Software Engineering (TSE)},
articleno = {Article 20},
numpages = {44},
keywords = {pragmatic-reuse plans, pragmatic-reuse plan enactment, pragmatic software reuse, planning, low commitment, lightweight process and tooling, Software reuse, white box reuse, Gilligan, source code investigation}
}

@INPROCEEDINGS{gilligan10,
author={R. {Holmes} and R. J. {Walker}},
booktitle={Proceedings of the International Conference on Software Engineering (ICSE)},
title={Supporting the Investigation and Planning of Pragmatic Reuse Tasks},
year={2007},
volume={},
number={},
pages={447-457},
keywords={software reusability;pragmatic reuse tasks;software reuse;industrial developers;complex reuse task;Software performance;Navigation;Data visualization;Global Positioning System;Displays;Laboratories;Computer science;Productivity;Computer industry;Performance evaluation},
doi={10.1109/ICSE.2007.83},
ISSN={1558-1225},
}

@article{skipper,
author = {S. {Makady} and R. {Walker}},
year = {2013},
pages = {1039--1070},
title = {Validating pragmatic reuse tasks by leveraging existing test suites},
volume = {43},
journal = {Software: Practice and Experience},
doi = {10.1002/spe.2134}
}

@article{tanno,
  title={テスト入力値生成技術の研究動向},
  author={丹野 治門 and 倉林 利行 and 張 暁晶 and 伊山 宗吉 and 安達 悠 and 岩田 真治 and 切貫 弘之},
  journal={コンピュータ ソフトウェア},
  volume={34},
  number={3},
  pages={121--147},
  year={2017},
  doi={10.11309/jssst.34.3_121}
}

